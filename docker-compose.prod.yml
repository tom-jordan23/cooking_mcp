# Production Docker Compose configuration for MCP Cooking Lab Notebook
# Includes security hardening, monitoring, and backup strategies

version: "3.8"

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-latest}
    container_name: cooking-mcp-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - DATABASE_URL=postgresql+asyncpg://cooking_user:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
    volumes:
      - notebook_data:/app/notebook:rw
      - app_logs:/app/logs:rw
      - app_tmp:/app/tmp:rw
    networks:
      - internal
      - external
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ulimits:
      nproc: 512
      nofile: 1024
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cooking-mcp.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.cooking-mcp.tls=true"
      - "traefik.http.routers.cooking-mcp.tls.certresolver=letsencrypt"
      - "traefik.http.services.cooking-mcp.loadbalancer.server.port=8080"

  # PostgreSQL database with security hardening
  db:
    image: postgres:15-alpine
    container_name: cooking-mcp-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cooking_mcp}
      - POSTGRES_USER=${POSTGRES_USER:-cooking_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - postgres_backups:/backups:rw
      - ./scripts/postgres-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - internal
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cooking_user} -d ${POSTGRES_DB:-cooking_mcp}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: cooking-mcp-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data:rw
    networks:
      - internal
    ports:
      - "${REDIS_PORT:-6379}:6379"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Traefik reverse proxy with SSL termination
  traefik:
    image: traefik:v3.0
    container_name: cooking-mcp-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt:rw
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: cooking-mcp-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups:rw
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - internal
    depends_on:
      - db
    command: ["/backup.sh"]
    profiles:
      - backup

  # Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: cooking-mcp-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw
    networks:
      - internal
      - monitoring
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cooking-mcp-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  notebook_data:
    driver: local
  app_logs:
    driver: local
  app_tmp:
    driver: local
  traefik_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  # Internal network for service-to-service communication
  internal:
    driver: bridge
    internal: true
  # External network for internet-facing services
  external:
    driver: bridge
  # Monitoring network
  monitoring:
    driver: bridge